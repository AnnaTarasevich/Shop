#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
    #Если МобильноеПриложениеКлиент Тогда
        ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
        ВыгрузитьДанныеВXMLНаСервере(ВременныйФайл);
        Сообщить("Файл выгружен: " + ВременныйФайл, СтатусСообщения.Важное);
    #Иначе
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
        Диалог.Заголовок = "Сохранить XML-файл";
        Диалог.Фильтр = "XML-файлы (*.xml)|*.xml";
        Диалог.ПолноеИмяФайла = "Выгрузка_" + СтрЗаменить(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd_HH-mm-ss"), " ", "_") + ".xml";
        
        Если Диалог.Выбрать() Тогда
            ВыгрузитьДанныеВXMLНаСервере(Диалог.ПолноеИмяФайла);
            Сообщить("Файл успешно выгружен: " + Диалог.ПолноеИмяФайла);
        КонецЕсли;
    #КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзXML(Команда)
    #Если МобильноеПриложениеКлиент Тогда
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
        Диалог.Заголовок = "Выберите XML-файл";
        Диалог.Фильтр = "XML-файлы (*.xml)|*.xml";
        
        Если Диалог.Выбрать() Тогда
            Попытка
                ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
                ДвоичныеДанные = Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла);
                ДвоичныеДанные.Записать(ВременныйФайл);
                
                ЗагрузитьДанныеИзXMLНаСервере(ВременныйФайл);
                
                УдалитьФайлы(ВременныйФайл);
            Исключение
                Сообщить("Ошибка при обработке файла: " + ОписаниеОшибки(), СтатусСообщения.Важное);
            КонецПопытки;
        КонецЕсли;
    #Иначе
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
        Диалог.Заголовок = "Выберите XML-файл";
        Диалог.Фильтр = "XML-файлы (*.xml)|*.xml";
        
        Если Диалог.Выбрать() Тогда
            ЗагрузитьДанныеИзXMLНаСервере(Диалог.ПолноеИмяФайла);
        КонецЕсли;
    #КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область СерверныеПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеВXMLНаСервере(ПутьФайла) Экспорт
    Попытка
        ЗаписьXML = Новый ЗаписьXML;
        ЗаписьXML.ОткрытьФайл(ПутьФайла);
        ЗаписьXML.ЗаписатьОбъявлениеXML();
        ЗаписьXML.ЗаписатьНачалоЭлемента("Данные");
        
        // Выгрузка справочников
        МассивСправочников = ПолучитьСправочникиДляВыгрузки();
        Для Каждого Справочник Из МассивСправочников Цикл
            ВыгрузитьСправочник(ЗаписьXML, Справочник);
        КонецЦикла;
        
        // Выгрузка регистра сведений "Штрихкоды"
        Если Метаданные.РегистрыСведений.Найти("Штрихкоды") <> Неопределено Тогда
            ВыгрузитьРегистрСведенийШтрихкоды(ЗаписьXML);
        КонецЕсли;
        
        ЗаписьXML.ЗаписатьКонецЭлемента();
        ЗаписьXML.Закрыть();
    Исключение
        Сообщить("Ошибка выгрузки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
    КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСправочник(ЗаписьXML, ИмяСправочника)
    ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяСправочника);
    
    Запрос = Новый Запрос(ПолучитьТекстЗапроса(ИмяСправочника));
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ЗаписьXML.ЗаписатьНачалоЭлемента("Элемент");
        ЗаписатьАтрибутыЭлемента(ЗаписьXML, Выборка, ИмяСправочника);
        ЗаписьXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
    
    ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРегистрСведенийШтрихкоды(ЗаписьXML)
    ЗаписьXML.ЗаписатьНачалоЭлемента("Штрихкоды");
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Штрихкоды.Номенклатура.Код КАК КодНоменклатуры,
    |    Штрихкоды.Штрихкод КАК Штрихкод
    |ИЗ
    |    РегистрСведений.Штрихкоды КАК Штрихкоды";
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ЗаписьXML.ЗаписатьНачалоЭлемента("Элемент");
        ЗаписьXML.ЗаписатьАтрибут("КодНоменклатуры", Выборка.КодНоменклатуры);
        ЗаписьXML.ЗаписатьАтрибут("Штрихкод", Выборка.Штрихкод);
        ЗаписьXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
    
    ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзXMLНаСервере(ПутьФайла) Экспорт
    НачатьТранзакцию();
    Попытка
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.ОткрытьФайл(ПутьФайла);
        
        МассивСправочников = ПолучитьСправочникиДляВыгрузки();
        
        Пока ЧтениеXML.Прочитать() Цикл
            Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
                ИмяЭлемента = ЧтениеXML.Имя;
                
                Если МассивСправочников.Найти(ИмяЭлемента) <> Неопределено Тогда
                    ОбработатьУзелXML(ЧтениеXML, ИмяЭлемента);
                ИначеЕсли ИмяЭлемента = "Штрихкоды" Тогда
                    ОбработатьШтрихкоды(ЧтениеXML);
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        ЧтениеXML.Закрыть();
        ЗафиксироватьТранзакцию();
        Сообщить("Данные загружены успешно!");
    Исключение
        ОтменитьТранзакцию();
        Сообщить("Ошибка загрузки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
    КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУзелXML(ЧтениеXML, ИмяСправочника)
    Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя <> ИмяСправочника Цикл
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Элемент" Тогда
            ЗагрузитьЭлементСправочника(ЧтениеXML, ИмяСправочника);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЭлементСправочника(ЧтениеXML, ИмяСправочника)
    Код = ЧтениеXML.ПолучитьАтрибут("Код");
    Наименование = ЧтениеXML.ПолучитьАтрибут("Наименование");
    
    Элемент = НайтиИлиСоздатьЭлемент(ИмяСправочника, Код, Наименование);
    
    Если ИмяСправочника = "НоменклатураСПР" Тогда
        Элемент.ВидНоменклатуры = ПолучитьСсылку("ВидыНоменклатуры", ЧтениеXML.ПолучитьАтрибут("ВидНоменклатуры"));
        Элемент.ЕдиницаИзмерения = ПолучитьСсылку("ЕдиницыИзмерения", ЧтениеXML.ПолучитьАтрибут("ЕдиницаИзмерения"));
        Элемент.ТоварнаяГруппа = ПолучитьСсылку("ТоварныеГруппы", ЧтениеXML.ПолучитьАтрибут("ТоварнаяГруппа"));
    ИначеЕсли ИмяСправочника = "Магазины" Тогда
        Элемент.СкладПоступления = ПолучитьСсылку("Склады", ЧтениеXML.ПолучитьАтрибут("СкладПоступления"));
        Элемент.СкладПродажи = ПолучитьСсылку("Склады", ЧтениеXML.ПолучитьАтрибут("СкладПродажи"));
    КонецЕсли;
    
    Элемент.Записать();
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкоды(ЧтениеXML)
    //Создаем временную таблицу для новых записей
    ТаблицаДанных = Новый ТаблицаЗначений;
    ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.НоменклатураСПР"));
    ТаблицаДанных.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
    
    //Собираем все данные в таблицу
    Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя <> "Штрихкоды" Цикл
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Элемент" Тогда
            КодНоменклатуры = ЧтениеXML.ПолучитьАтрибут("КодНоменклатуры");
            Штрихкод = ЧтениеXML.ПолучитьАтрибут("Штрихкод");
            
            Если Не ЗначениеЗаполнено(КодНоменклатуры) Или Не ЗначениеЗаполнено(Штрихкод) Тогда
                Продолжить;
            КонецЕсли;
            
            Номенклатура = НайтиИлиСоздатьНоменклатуру(КодНоменклатуры);
            Если Номенклатура = Неопределено Тогда
                Сообщить("Не найдена номенклатура с кодом: " + КодНоменклатуры, СтатусСообщения.Внимание);
                Продолжить;
            КонецЕсли;
            
            // Проверка на дубликаты
            Если Не ШтрихкодСуществует(Номенклатура, Штрихкод) Тогда
                НоваяСтрока = ТаблицаДанных.Добавить();
                НоваяСтрока.Номенклатура = Номенклатура;
                НоваяСтрока.Штрихкод = Штрихкод;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    //Записываем данные одной операцией
    Если ТаблицаДанных.Количество() > 0 Тогда
        Попытка
            НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
            
            Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
                НоваяЗапись = НаборЗаписей.Добавить();
                НоваяЗапись.Номенклатура = СтрокаТаблицы.Номенклатура;
                НоваяЗапись.Штрихкод = СтрокаТаблицы.Штрихкод;
            КонецЦикла;
            
            НаборЗаписей.Записать();
        Исключение
            Сообщить("Ошибка записи в регистр: " + ОписаниеОшибки(), СтатусСообщения.Ошибка);
        КонецПопытки;
    Иначе
    КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ВспомогательныеМетоды

&НаСервере
Функция ПолучитьСправочникиДляВыгрузки()
    Массив = Новый Массив;
    Массив.Добавить("ЕдиницыИзмерения");
    Массив.Добавить("ВидыНоменклатуры");
    Массив.Добавить("ТоварныеГруппы");
    Массив.Добавить("Склады");
    Массив.Добавить("НоменклатураСПР");
    Массив.Добавить("Магазины");
    Возврат Массив;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса(ИмяСправочника)
    Текст = "ВЫБРАТЬ 
    |    Справочник.Код КАК КодСправочника, 
    |    Справочник.Наименование КАК НаименованиеСправочника";
    
    Если ИмяСправочника = "НоменклатураСПР" Тогда
        Текст = Текст + ",
        |    ВЫБОР КОГДА Справочник.ВидНоменклатуры ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.ВидНоменклатуры.Код КОНЕЦ КАК ВидНоменклатурыКод,
        |    ВЫБОР КОГДА Справочник.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.ЕдиницаИзмерения.Код КОНЕЦ КАК ЕдиницаИзмеренияКод,
        |    ВЫБОР КОГДА Справочник.ТоварнаяГруппа ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.ТоварнаяГруппа.Код КОНЕЦ КАК ТоварнаяГруппаКод";
    ИначеЕсли ИмяСправочника = "Магазины" Тогда
        Текст = Текст + ",
        |    ВЫБОР КОГДА Справочник.СкладПоступления ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.СкладПоступления.Код КОНЕЦ КАК СкладПоступленияКод,
        |    ВЫБОР КОГДА Справочник.СкладПродажи ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.СкладПродажи.Код КОНЕЦ КАК СкладПродажиКод";
    КонецЕсли;
    
    Текст = Текст + "
    |ИЗ 
    |    Справочник." + ИмяСправочника + " КАК Справочник";
    
    Возврат Текст;
КонецФункции

&НаСервере
Процедура ЗаписатьАтрибутыЭлемента(ЗаписьXML, Выборка, ИмяСправочника)
    // Преобразуем все значения к строковому типу перед записью
    ЗаписьXML.ЗаписатьАтрибут("Код", Строка(Выборка.КодСправочника));
    ЗаписьXML.ЗаписатьАтрибут("Наименование", Строка(Выборка.НаименованиеСправочника));
    
    Если ИмяСправочника = "НоменклатураСПР" Тогда
        ЗаписьXML.ЗаписатьАтрибут("ВидНоменклатуры", 
            ?(Выборка.ВидНоменклатурыКод = Неопределено, "", Строка(Выборка.ВидНоменклатурыКод)));
        ЗаписьXML.ЗаписатьАтрибут("ЕдиницаИзмерения", 
            ?(Выборка.ЕдиницаИзмеренияКод = Неопределено, "", Строка(Выборка.ЕдиницаИзмеренияКод)));
        ЗаписьXML.ЗаписатьАтрибут("ТоварнаяГруппа", 
            ?(Выборка.ТоварнаяГруппаКод = Неопределено, "", Строка(Выборка.ТоварнаяГруппаКод)));
    ИначеЕсли ИмяСправочника = "Магазины" Тогда
        ЗаписьXML.ЗаписатьАтрибут("СкладПоступления", 
            ?(Выборка.СкладПоступленияКод = Неопределено, "", Строка(Выборка.СкладПоступленияКод)));
        ЗаписьXML.ЗаписатьАтрибут("СкладПродажи", 
            ?(Выборка.СкладПродажиКод = Неопределено, "", Строка(Выборка.СкладПродажиКод)));
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиИлиСоздатьЭлемент(ИмяСправочника, Код, Наименование)
    Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник." + ИмяСправочника + " ГДЕ Код = &Код");
    Запрос.УстановитьПараметр("Код", Код);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        // Получаем объект существующего элемента
        Элемент = Выборка.Ссылка.ПолучитьОбъект();
        Если Элемент <> Неопределено Тогда
            Элемент.Наименование = Наименование;
            Возврат Элемент;
        КонецЕсли;
    КонецЕсли;
    
    // Создаем новый элемент
    НовыйЭлемент = Справочники[ИмяСправочника].СоздатьЭлемент();
    НовыйЭлемент.Код = Код;
    НовыйЭлемент.Наименование = Наименование;
    Возврат НовыйЭлемент;
КонецФункции

&НаСервере
Функция ПолучитьСсылку(ИмяСправочника, Код)
    Если ПустаяСтрока(Код) Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник." + ИмяСправочника + " ГДЕ Код = &Код");
    Запрос.УстановитьПараметр("Код", Код);
    Результат = Запрос.Выполнить();
    
    Если Результат.Пустой() Тогда
        Возврат Справочники[ИмяСправочника].СоздатьЭлемент(Код, "Новый " + ИмяСправочника).Ссылка;
    Иначе
        Возврат Результат.Выбрать().Ссылка;
    КонецЕсли;
КонецФункции

&НаСервере
Функция НайтиИлиСоздатьНоменклатуру(Код) Экспорт
    // 1. Ищем существующую номенклатуру (оптимизированный запрос)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Номенклатура.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.НоменклатураСПР КАК Номенклатура
    |ГДЕ
    |    Номенклатура.Код = &Код
    |    И НЕ Номенклатура.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Код", Код);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Ссылка;
    КонецЕсли;
    
    // 2. Дополнительная проверка (на случай проблем с регистром)
    Попытка
        // Альтернативный поиск по коду
        Ссылка = Справочники.Номенклатура.НайтиПоКоду(Код);
        Если Ссылка <> Неопределено Тогда
            Возврат Ссылка;
        КонецЕсли;
        
        // Поиск по наименованию, если код мог измениться
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Номенклатура.Ссылка КАК Ссылка
        |ИЗ
        |    Справочник.НоменклатураСПР КАК Номенклатура
        |ГДЕ
        |    Номенклатура.Наименование ПОДОБНО &Поиск
        |    И НЕ Номенклатура.ПометкаУдаления";
        
        Запрос.УстановитьПараметр("Поиск", "%" + Код + "%");
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при альтернативном поиске номенклатуры: " + ОписаниеОшибки(), 
                 СтатусСообщения.Предупреждение);
    КонецПопытки;
    
    // 3. Если номенклатура не найдена, выводим диагностику
    Сообщить("Номенклатура с кодом " + Код + " не найдена. Доступные коды:");
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 10
    |    Номенклатура.Код КАК Код,
    |    Номенклатура.Наименование КАК Наименование
    |ИЗ
    |    Справочник.НоменклатураСПР КАК Номенклатура
    |ГДЕ
    |    НЕ Номенклатура.ПометкаУдаления
    |УПОРЯДОЧИТЬ ПО
    |    Код";
    
    Результат = Запрос.Выполнить();
    Для Каждого Строка Из Результат.Выбрать() Цикл
        Сообщить("Код: " + Строка.Код + " | Наименование: " + Строка.Наименование);
    КонецЦикла;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция ШтрихкодСуществует(Номенклатура, Штрихкод)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Штрихкоды.Штрихкод
    |ИЗ
    |    РегистрСведений.Штрихкоды КАК Штрихкоды
    |ГДЕ
    |    Штрихкоды.Номенклатура = &Номенклатура
    |    И Штрихкоды.Штрихкод = &Штрихкод";
    
    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
    Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти