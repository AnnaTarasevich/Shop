#Область ПрограммныйИнтерфейс

&НаКлиенте
Процедура ВыгрузитьВXML(Команда)
    #Если МобильноеПриложениеКлиент Тогда
        ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
        ВыгрузитьДанныеВXMLНаСервере(ВременныйФайл);
        
        Попытка
            ДвоичныеДанные = Новый ДвоичныеДанные(ВременныйФайл);
            ИмяФайла = "Выгрузка_" + Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd_HH-mm-ss") + ".xml";
            
            // 1. Попытка сохранить в стандартную папку Download
            Попытка
                ПутьDownload = "/storage/emulated/0/Download/" + ИмяФайла;
                ДвоичныеДанные.Записать(ПутьDownload);
                Сообщить("Файл сохранен в папке Download: " + ПутьDownload);
            Исключение
                // 2. Альтернативный способ через системный диалог (универсальный)
                Попытка
                    // Создаем структуру безопасным способом
                    Параметры = Новый Структура();
                    Параметры.Вставить("ИмяФайла", ИмяФайла);
                    Параметры.Вставить("ТипФайла", "application/xml");
                    
                    // Альтернативные варианты имен параметров
                    Если НЕ Параметры.Свойство("ИмяФайла") Тогда
                        Параметры.Вставить("FileName", ИмяФайла);
                        Параметры.Вставить("ContentType", "application/xml");
                    КонецЕсли;
                    
                    Результат = ДвоичныеДанные.ПолучитьФайл(Параметры);
                    
                    Если Результат = Неопределено Тогда
                        // 3. Сохранение в кэш приложения
                        ПутьКэша = ПолучитьИмяВременногоФайла(ИмяФайла);
                        ДвоичныеДанные.Записать(ПутьКэша);
                        Сообщить("Файл временно сохранен: " + ПутьКэша);
                    КонецЕсли;
                Исключение
                    Сообщить("Ошибка сохранения: " + ОписаниеОшибки(), СтатусСообщения.Важное);
                КонецПопытки;
            КонецПопытки;
            
        Исключение
            Сообщить("Ошибка выгрузки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
        КонецПопытки;
        
        УдалитьФайлы(ВременныйФайл);
    #ИначеЕсли ТонкийКлиент Тогда
        // Код для десктопной версии
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
        Диалог.Заголовок = "Сохранить XML-файл";
        Диалог.Фильтр = "XML-файлы (*.xml)|*.xml";
        Диалог.ПолноеИмяФайла = "Выгрузка_" + СтрЗаменить(Формат(ТекущаяДата(), "ДФ=yyyy-MM-dd_HH-mm-ss"), " ", "_") + ".xml";
        
        Если Диалог.Выбрать() Тогда
            ВыгрузитьДанныеВXMLНаСервере(Диалог.ПолноеИмяФайла);
            Сообщить("Файл успешно выгружен: " + Диалог.ПолноеИмяФайла);
        КонецЕсли;
    #КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзXML(Команда)
    #Если МобильноеПриложениеКлиент Тогда
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
        Диалог.Заголовок = "Выберите XML-файл";
        Диалог.Фильтр = "XML-файлы (*.xml)|*.xml";
        
        Если Диалог.Выбрать() Тогда
            Попытка
                ВременныйФайл = ПолучитьИмяВременногоФайла("xml");
                ДвоичныеДанные = Новый ДвоичныеДанные(Диалог.ПолноеИмяФайла);
                ДвоичныеДанные.Записать(ВременныйФайл);
                
                ЗагрузитьДанныеИзXMLНаСервере(ВременныйФайл);
                
                УдалитьФайлы(ВременныйФайл);
            Исключение
                Сообщить("Ошибка при обработке файла: " + ОписаниеОшибки(), СтатусСообщения.Важное);
            КонецПопытки;
        КонецЕсли;
    #Иначе
        Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
        Диалог.Заголовок = "Выберите XML-файл";
        Диалог.Фильтр = "XML-файлы (*.xml)|*.xml";
        
        Если Диалог.Выбрать() Тогда
            ЗагрузитьДанныеИзXMLНаСервере(Диалог.ПолноеИмяФайла);
        КонецЕсли;
    #КонецЕсли
КонецПроцедуры

#КонецОбласти

#Область СерверныеПроцедуры

&НаСервере
Процедура ВыгрузитьДанныеВXMLНаСервере(ПутьФайла) Экспорт
    Попытка
        ЗаписьXML = Новый ЗаписьXML;
        ЗаписьXML.ОткрытьФайл(ПутьФайла);
        ЗаписьXML.ЗаписатьОбъявлениеXML();
        ЗаписьXML.ЗаписатьНачалоЭлемента("Данные");
        
        // Выгрузка справочников (оставляем только нужные)
        МассивСправочников = Новый Массив;
        МассивСправочников.Добавить("ЕдиницыИзмерения");
        МассивСправочников.Добавить("ВидыНоменклатуры");
        МассивСправочников.Добавить("ТоварныеГруппы");
        МассивСправочников.Добавить("НоменклатураСПР");
        
        Для Каждого Справочник Из МассивСправочников Цикл
            ВыгрузитьСправочник(ЗаписьXML, Справочник);
        КонецЦикла;
        
        // Выгрузка документов инвентаризации
        ВыгрузитьИнвентаризации(ЗаписьXML);
        
        // Выгрузка регистра сведений "Штрихкоды"
        Если Метаданные.РегистрыСведений.Найти("Штрихкоды") <> Неопределено Тогда
            ВыгрузитьРегистрСведенийШтрихкоды(ЗаписьXML);
        КонецЕсли;
        
        ЗаписьXML.ЗаписатьКонецЭлемента();
        ЗаписьXML.Закрыть();
    Исключение
        Сообщить("Ошибка выгрузки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
    КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьИнвентаризации(ЗаписьXML)
    ЗаписьXML.ЗаписатьНачалоЭлемента("Инвентаризации");
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Инвентаризация.Ссылка КАК Ссылка,
    |    Инвентаризация.Дата КАК Дата,
    |    Инвентаризация.Номер КАК Номер
    |ИЗ
    |    Документ.Инвентаризация КАК Инвентаризация
    |ГДЕ
    |    НЕ Инвентаризация.ПометкаУдаления";
    
    Результат = Запрос.Выполнить();
    ВыборкаДокументов = Результат.Выбрать();
    
    Пока ВыборкаДокументов.Следующий() Цикл
        ЗаписьXML.ЗаписатьНачалоЭлемента("Документ");
        ЗаписьXML.ЗаписатьАтрибут("Номер", ВыборкаДокументов.Номер);
        // Формат даты со временем в ISO-формате
        ЗаписьXML.ЗаписатьАтрибут("Дата", Формат(ВыборкаДокументов.Дата, "ДФ=yyyy-MM-dd HH:mm:ss"));
        
        // Выгружаем табличную часть
        ДокументОбъект = ВыборкаДокументов.Ссылка.ПолучитьОбъект();
        ВыгрузитьТабличнуюЧастьИнвентаризации(ЗаписьXML, ДокументОбъект.НоменклатураТ);
        
        ЗаписьXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
    
    ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьТабличнуюЧастьИнвентаризации(ЗаписьXML, ТабличнаяЧасть)
    ЗаписьXML.ЗаписатьНачалоЭлемента("НоменклатураТ");
    
    Для Каждого СтрокаТЧ Из ТабличнаяЧасть Цикл
        ЗаписьXML.ЗаписатьНачалоЭлемента("Строка");
        ЗаписьXML.ЗаписатьАтрибут("Номенклатура", СтрокаТЧ.Номенклатура.Код);
        ЗаписьXML.ЗаписатьАтрибут("УчетноеКоличество", Формат(СтрокаТЧ.УчетноеКоличество, "ЧГ="));
        ЗаписьXML.ЗаписатьАтрибут("ФактическоеКоличество", Формат(СтрокаТЧ.ФактическоеКоличество, "ЧГ="));
        ЗаписьXML.ЗаписатьАтрибут("Разница", Формат(СтрокаТЧ.Разница, "ЧГ="));
        ЗаписьXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
    
    ЗаписьXML.ЗаписатьКонецЭлемента(); // Закрываем элемент НоменклатураТ
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьСправочник(ЗаписьXML, ИмяСправочника)
    ЗаписьXML.ЗаписатьНачалоЭлемента(ИмяСправочника);
    
    Запрос = Новый Запрос(ПолучитьТекстЗапроса(ИмяСправочника));
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ЗаписьXML.ЗаписатьНачалоЭлемента("Элемент");
        ЗаписатьАтрибутыЭлемента(ЗаписьXML, Выборка, ИмяСправочника);
        ЗаписьXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
    
    ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура ВыгрузитьРегистрСведенийШтрихкоды(ЗаписьXML)
    ЗаписьXML.ЗаписатьНачалоЭлемента("Штрихкоды");
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ
    |    Штрихкоды.Номенклатура.Код КАК КодНоменклатуры,
    |    Штрихкоды.Штрихкод КАК Штрихкод
    |ИЗ
    |    РегистрСведений.Штрихкоды КАК Штрихкоды";
    
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Пока Выборка.Следующий() Цикл
        ЗаписьXML.ЗаписатьНачалоЭлемента("Элемент");
        ЗаписьXML.ЗаписатьАтрибут("КодНоменклатуры", Выборка.КодНоменклатуры);
        ЗаписьXML.ЗаписатьАтрибут("Штрихкод", Выборка.Штрихкод);
        ЗаписьXML.ЗаписатьКонецЭлемента();
    КонецЦикла;
    
    ЗаписьXML.ЗаписатьКонецЭлемента();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеИзXMLНаСервере(ПутьФайла) Экспорт
    НачатьТранзакцию();
    Попытка
        ЧтениеXML = Новый ЧтениеXML;
        ЧтениеXML.ОткрытьФайл(ПутьФайла);
        
        МассивСправочников = ПолучитьСправочникиДляВыгрузки();
        
        Пока ЧтениеXML.Прочитать() Цикл
            Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента Тогда
                ИмяЭлемента = ЧтениеXML.Имя;
                
                Если МассивСправочников.Найти(ИмяЭлемента) <> Неопределено Тогда
                    ОбработатьУзелXML(ЧтениеXML, ИмяЭлемента);
                ИначеЕсли ИмяЭлемента = "Инвентаризации" Тогда
                    ОбработатьИнвентаризации(ЧтениеXML);
                ИначеЕсли ИмяЭлемента = "Штрихкоды" Тогда
                    ОбработатьШтрихкоды(ЧтениеXML);
                КонецЕсли;
            КонецЕсли;
        КонецЦикла;
        
        ЧтениеXML.Закрыть();
        ЗафиксироватьТранзакцию();
        Сообщить("Данные загружены успешно!");
    Исключение
        ОтменитьТранзакцию();
        Сообщить("Ошибка загрузки: " + ОписаниеОшибки(), СтатусСообщения.Важное);
    КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ОбработатьИнвентаризации(ЧтениеXML)
    Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя <> "Инвентаризации" Цикл
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Документ" Тогда
            ОбработатьДокументИнвентаризации(ЧтениеXML);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьДокументИнвентаризации(ЧтениеXML)
    Номер = ЧтениеXML.ПолучитьАтрибут("Номер");
    Дата = Дата(ЧтениеXML.ПолучитьАтрибут("Дата"));
    
    // Ищем существующий документ
    Документ = Неопределено;
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Инвентаризация.Ссылка КАК Ссылка
    |ИЗ
    |    Документ.Инвентаризация КАК Инвентаризация
    |ГДЕ
    |    Инвентаризация.Номер = &Номер
    |    И НЕ Инвентаризация.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Номер", Номер);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        // Документ найден - получаем объект для обновления
        Документ = Выборка.Ссылка.ПолучитьОбъект();
        Документ.Дата = Дата;
        // Очищаем табличную часть перед заполнением
        Документ.НоменклатураТ.Очистить();
    Иначе
        // Документ не найден - создаем новый
        Документ = Документы.Инвентаризация.СоздатьДокумент();
        Документ.Номер = Номер;
        Документ.Дата = Дата;
    КонецЕсли;
    
    // Обрабатываем табличную часть
    Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя <> "Документ" Цикл
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "НоменклатураТ" Тогда
            ОбработатьТЧИнвентаризации(ЧтениеXML, Документ);
        КонецЕсли;
    КонецЦикла;
    
    Документ.Записать();
КонецПроцедуры

&НаСервере
Процедура ОбработатьТЧИнвентаризации(ЧтениеXML, Документ)
    Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя <> "НоменклатураТ" Цикл
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Строка" Тогда
            НоменклатураКод = ЧтениеXML.ПолучитьАтрибут("Номенклатура");
            УчетноеКоличество = Число(ЧтениеXML.ПолучитьАтрибут("УчетноеКоличество"));
            ФактическоеКоличество = Число(ЧтениеXML.ПолучитьАтрибут("ФактическоеКоличество"));
            Разница = Число(ЧтениеXML.ПолучитьАтрибут("Разница"));
            
            Номенклатура = НайтиИлиСоздатьНоменклатуру(НоменклатураКод);
            Если Номенклатура = Неопределено Тогда
                Сообщить("Не найдена номенклатура с кодом: " + НоменклатураКод, СтатусСообщения.Внимание);
                Продолжить;
            КонецЕсли;
            
            СтрокаТЧ = Документ.НоменклатураТ.Добавить();
            СтрокаТЧ.Номенклатура = Номенклатура;
            СтрокаТЧ.УчетноеКоличество = УчетноеКоличество;
            СтрокаТЧ.ФактическоеКоличество = ФактическоеКоличество;
            СтрокаТЧ.Разница = Разница;
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбработатьУзелXML(ЧтениеXML, ИмяСправочника)
    Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя <> ИмяСправочника Цикл
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Элемент" Тогда
            ЗагрузитьЭлементСправочника(ЧтениеXML, ИмяСправочника);
        КонецЕсли;
    КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЭлементСправочника(ЧтениеXML, ИмяСправочника)
    Код = ЧтениеXML.ПолучитьАтрибут("Код");
    Наименование = ЧтениеXML.ПолучитьАтрибут("Наименование");
    
    Элемент = НайтиИлиСоздатьЭлемент(ИмяСправочника, Код, Наименование);
    
    Если ИмяСправочника = "НоменклатураСПР" Тогда
        // Получаем коды из атрибутов XML
        КодВидаНоменклатуры = ЧтениеXML.ПолучитьАтрибут("ВидНоменклатуры");
        КодЕдиницыИзмерения = ЧтениеXML.ПолучитьАтрибут("ЕдиницаИзмерения");
        КодТоварнойГруппы = ЧтениеXML.ПолучитьАтрибут("ТоварнаяГруппа");
        
        // Устанавливаем только если значения не пустые
        Если Не ПустаяСтрока(КодВидаНоменклатуры) Тогда
            Элемент.ВидНоменклатуры = ПолучитьСсылку("ВидыНоменклатуры", КодВидаНоменклатуры);
        КонецЕсли;
        
        Если Не ПустаяСтрока(КодЕдиницыИзмерения) Тогда
            Элемент.ЕдиницаИзмерения = ПолучитьСсылку("ЕдиницыИзмерения", КодЕдиницыИзмерения);
        КонецЕсли;
        
        Если Не ПустаяСтрока(КодТоварнойГруппы) Тогда
            Элемент.ТоварнаяГруппа = ПолучитьСсылку("ТоварныеГруппы", КодТоварнойГруппы);
        КонецЕсли;
    КонецЕсли;
    
    Элемент.Записать();
КонецПроцедуры

&НаСервере
Процедура ОбработатьШтрихкоды(ЧтениеXML)
    //Создаем временную таблицу для новых записей
    ТаблицаДанных = Новый ТаблицаЗначений;
    ТаблицаДанных.Колонки.Добавить("Номенклатура", Новый ОписаниеТипов("СправочникСсылка.НоменклатураСПР"));
    ТаблицаДанных.Колонки.Добавить("Штрихкод", Новый ОписаниеТипов("Строка"));
    
    //Собираем все данные в таблицу
    Пока ЧтениеXML.Прочитать() И ЧтениеXML.Имя <> "Штрихкоды" Цикл
        Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И ЧтениеXML.Имя = "Элемент" Тогда
            КодНоменклатуры = ЧтениеXML.ПолучитьАтрибут("КодНоменклатуры");
            Штрихкод = ЧтениеXML.ПолучитьАтрибут("Штрихкод");
            
            Если Не ЗначениеЗаполнено(КодНоменклатуры) Или Не ЗначениеЗаполнено(Штрихкод) Тогда
                Продолжить;
            КонецЕсли;
            
            Номенклатура = НайтиИлиСоздатьНоменклатуру(КодНоменклатуры);
            Если Номенклатура = Неопределено Тогда
                Сообщить("Не найдена номенклатура с кодом: " + КодНоменклатуры, СтатусСообщения.Внимание);
                Продолжить;
            КонецЕсли;
            
            // Проверка на дубликаты
            Если Не ШтрихкодСуществует(Номенклатура, Штрихкод) Тогда
                НоваяСтрока = ТаблицаДанных.Добавить();
                НоваяСтрока.Номенклатура = Номенклатура;
                НоваяСтрока.Штрихкод = Штрихкод;
            КонецЕсли;
        КонецЕсли;
    КонецЦикла;
    
    //Записываем данные одной операцией
    Если ТаблицаДанных.Количество() > 0 Тогда
        Попытка
            НаборЗаписей = РегистрыСведений.Штрихкоды.СоздатьНаборЗаписей();
            
            Для Каждого СтрокаТаблицы Из ТаблицаДанных Цикл
                НоваяЗапись = НаборЗаписей.Добавить();
                НоваяЗапись.Номенклатура = СтрокаТаблицы.Номенклатура;
                НоваяЗапись.Штрихкод = СтрокаТаблицы.Штрихкод;
            КонецЦикла;
            
            НаборЗаписей.Записать();
        Исключение
            Сообщить("Ошибка записи в регистр: " + ОписаниеОшибки(), СтатусСообщения.Ошибка);
        КонецПопытки;
    Иначе
    КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСсылку(ИмяСправочника, Код)
    Если ПустаяСтрока(Код) Тогда
        Возврат Неопределено;
    КонецЕсли;
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Справочник.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник." + ИмяСправочника + " КАК Справочник
    |ГДЕ
    |    Справочник.Код = &Код
    |    И НЕ Справочник.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Код", Код);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Ссылка;
    КонецЕсли;
    
    // Если не нашли - попробуем найти по наименованию (если код совпадает с наименованием)
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Справочник.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник." + ИмяСправочника + " КАК Справочник
    |ГДЕ
    |    Справочник.Наименование = &Код
    |    И НЕ Справочник.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Код", Код);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Ссылка;
    КонецЕсли;
    
    // Если не нашли совсем - создаем новый элемент
    Попытка
        НовыйЭлемент = Справочники[ИмяСправочника].СоздатьЭлемент();
        НовыйЭлемент.Код = Код;
        НовыйЭлемент.Наименование = Код;
        НовыйЭлемент.Записать();
        Возврат НовыйЭлемент.Ссылка;
    Исключение
        Сообщить("Ошибка при создании элемента справочника " + ИмяСправочника + " с кодом " + Код,
                 СтатусСообщения.Ошибка);
        Возврат Неопределено;
    КонецПопытки;
КонецФункции
#КонецОбласти

#Область ВспомогательныеМетоды

&НаСервере
Функция ПолучитьСправочникиДляВыгрузки()
    Массив = Новый Массив;
    Массив.Добавить("ЕдиницыИзмерения");
    Массив.Добавить("ВидыНоменклатуры");
    Массив.Добавить("ТоварныеГруппы");
    Массив.Добавить("НоменклатураСПР");
    Возврат Массив;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса(ИмяСправочника)
    Текст = "ВЫБРАТЬ 
    |    Справочник.Код КАК КодСправочника, 
    |    Справочник.Наименование КАК НаименованиеСправочника";
    
    Если ИмяСправочника = "НоменклатураСПР" Тогда
        Текст = Текст + ",
        |    ВЫБОР КОГДА Справочник.ВидНоменклатуры ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.ВидНоменклатуры.Код КОНЕЦ КАК ВидНоменклатурыКод,
        |    ВЫБОР КОГДА Справочник.ЕдиницаИзмерения ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.ЕдиницаИзмерения.Код КОНЕЦ КАК ЕдиницаИзмеренияКод,
        |    ВЫБОР КОГДА Справочник.ТоварнаяГруппа ЕСТЬ NULL ТОГДА NULL ИНАЧЕ Справочник.ТоварнаяГруппа.Код КОНЕЦ КАК ТоварнаяГруппаКод";
    КонецЕсли;
    
    Текст = Текст + "
    |ИЗ 
    |    Справочник." + ИмяСправочника + " КАК Справочник";
    
    Возврат Текст;
КонецФункции

&НаСервере
Процедура ЗаписатьАтрибутыЭлемента(ЗаписьXML, Выборка, ИмяСправочника)
    // Преобразуем все значения к строковому типу перед записью
    ЗаписьXML.ЗаписатьАтрибут("Код", Строка(Выборка.КодСправочника));
    ЗаписьXML.ЗаписатьАтрибут("Наименование", Строка(Выборка.НаименованиеСправочника));
    
    Если ИмяСправочника = "НоменклатураСПР" Тогда
        ЗаписьXML.ЗаписатьАтрибут("ВидНоменклатуры", 
            ?(Выборка.ВидНоменклатурыКод = Неопределено, "", Строка(Выборка.ВидНоменклатурыКод)));
        ЗаписьXML.ЗаписатьАтрибут("ЕдиницаИзмерения", 
            ?(Выборка.ЕдиницаИзмеренияКод = Неопределено, "", Строка(Выборка.ЕдиницаИзмеренияКод)));
        ЗаписьXML.ЗаписатьАтрибут("ТоварнаяГруппа", 
            ?(Выборка.ТоварнаяГруппаКод = Неопределено, "", Строка(Выборка.ТоварнаяГруппаКод)));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция НайтиИлиСоздатьЭлемент(ИмяСправочника, Код, Наименование)
    Запрос = Новый Запрос("ВЫБРАТЬ Ссылка ИЗ Справочник." + ИмяСправочника + " ГДЕ Код = &Код");
    Запрос.УстановитьПараметр("Код", Код);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        // Получаем объект существующего элемента
        Элемент = Выборка.Ссылка.ПолучитьОбъект();
        Если Элемент <> Неопределено Тогда
            Элемент.Наименование = Наименование;
            Возврат Элемент;
        КонецЕсли;
    КонецЕсли;
    
    // Создаем новый элемент
    НовыйЭлемент = Справочники[ИмяСправочника].СоздатьЭлемент();
    НовыйЭлемент.Код = Код;
    НовыйЭлемент.Наименование = Наименование;
    Возврат НовыйЭлемент;
КонецФункции

&НаСервере
Функция НайтиИлиСоздатьНоменклатуру(Код) Экспорт
    // 1. Ищем существующую номенклатуру (оптимизированный запрос)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Номенклатура.Ссылка КАК Ссылка
    |ИЗ
    |    Справочник.НоменклатураСПР КАК Номенклатура
    |ГДЕ
    |    Номенклатура.Код = &Код
    |    И НЕ Номенклатура.ПометкаУдаления";
    
    Запрос.УстановитьПараметр("Код", Код);
    Результат = Запрос.Выполнить();
    Выборка = Результат.Выбрать();
    
    Если Выборка.Следующий() Тогда
        Возврат Выборка.Ссылка;
    КонецЕсли;
    
    // 2. Дополнительная проверка (на случай проблем с регистром)
    Попытка
        // Альтернативный поиск по коду
        Ссылка = Справочники.Номенклатура.НайтиПоКоду(Код);
        Если Ссылка <> Неопределено Тогда
            Возврат Ссылка;
        КонецЕсли;
        
        // Поиск по наименованию, если код мог измениться
        Запрос = Новый Запрос;
        Запрос.Текст = 
        "ВЫБРАТЬ ПЕРВЫЕ 1
        |    Номенклатура.Ссылка КАК Ссылка
        |ИЗ
        |    Справочник.НоменклатураСПР КАК Номенклатура
        |ГДЕ
        |    Номенклатура.Наименование ПОДОБНО &Поиск
        |    И НЕ Номенклатура.ПометкаУдаления";
        
        Запрос.УстановитьПараметр("Поиск", "%" + Код + "%");
        Результат = Запрос.Выполнить();
        Выборка = Результат.Выбрать();
        
        Если Выборка.Следующий() Тогда
            Возврат Выборка.Ссылка;
        КонецЕсли;
        
    Исключение
        Сообщить("Ошибка при альтернативном поиске номенклатуры: " + ОписаниеОшибки(), 
                 СтатусСообщения.Предупреждение);
    КонецПопытки;
    
    // 3. Если номенклатура не найдена, выводим диагностику
    Сообщить("Номенклатура с кодом " + Код + " не найдена. Доступные коды:");
    
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 10
    |    Номенклатура.Код КАК Код,
    |    Номенклатура.Наименование КАК Наименование
    |ИЗ
    |    Справочник.НоменклатураСПР КАК Номенклатура
    |ГДЕ
    |    НЕ Номенклатура.ПометкаУдаления
    |УПОРЯДОЧИТЬ ПО
    |    Код";
    
    Результат = Запрос.Выполнить();
    Для Каждого Строка Из Результат.Выбрать() Цикл
        Сообщить("Код: " + Строка.Код + " | Наименование: " + Строка.Наименование);
    КонецЦикла;
    
    Возврат Неопределено;
КонецФункции

&НаСервере
Функция ШтрихкодСуществует(Номенклатура, Штрихкод)
    Запрос = Новый Запрос;
    Запрос.Текст = 
    "ВЫБРАТЬ ПЕРВЫЕ 1
    |    Штрихкоды.Штрихкод
    |ИЗ
    |    РегистрСведений.Штрихкоды КАК Штрихкоды
    |ГДЕ
    |    Штрихкоды.Номенклатура = &Номенклатура
    |    И Штрихкоды.Штрихкод = &Штрихкод";
    
    Запрос.УстановитьПараметр("Номенклатура", Номенклатура);
    Запрос.УстановитьПараметр("Штрихкод", Штрихкод);
    Возврат Не Запрос.Выполнить().Пустой();
КонецФункции

#КонецОбласти